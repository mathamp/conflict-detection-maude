fmod EVENT is
    protecting STRING .

    sorts Event .
    subsorts String < Event .
endfm

fmod ACTION is
    protecting STRING .

    sorts Action .
    
    op _On : String -> Action [ctor] .
    op _Off : String -> Action [ctor] .
endfm

omod DEVICE is
    protecting EVENT .
    protecting ACTION .
    protecting INT .
    protecting STRING .

    sorts Option .
    subsorts Option < Event Action .
    subsorts String < Oid .

    op None : -> Option [ctor] .

    class AmbientVariable | val : Int .
    class Sensor | currentEvent : Event, channel : Nat .
    class Actuator | currentAction : Action, channel : Nat .

    class Conflict | reason : String .

    class EventLog | event : Event, timestamp : Nat .
    class ActionLog | action : Action, timestamp : Nat .
endom

mod SIMULATION is
    protecting DEVICE .
    protecting STRING .

    vars I1 I2 I3 I4 : Int .
    vars N1 N2 N3 N4 : Nat .
    vars O1 O2 O3 O4 : Oid .
    vars S1 S2 S3 S4 : String .
    vars E1 E2 E3 E4 : Event .
    vars A1 A2 A3 A4 : Action .
    vars C : Configuration .


    --- Regras dos sensores
    --- Levantam eventos quando a variável observada ("Temperatura") atinge o limiar desejado.


    crl [temperature-hot] :
        < "Time" : AmbientVariable | val : N1 >
        < "Temperature" : AmbientVariable | val : I1 >
        < "TemperatureSensor" : Sensor | currentEvent : E1, channel : N2 >
    =>
        < "Time" : AmbientVariable | val : N1 >
        < "Temperature" : AmbientVariable | val : I1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Hot", channel : N2 >
        < "TemperatureLog" : EventLog | event : "Temperature Hot", timestamp : N1 >
    if 25 <= I1 and not (E1 == "Temperature Hot") .

    crl [temperature-ok] :
        < "Time" : AmbientVariable | val : N1 >
        < "Temperature" : AmbientVariable | val : I1 >
        < "TemperatureSensor" : Sensor | currentEvent : E1, channel : N2 >
    =>
        < "Time" : AmbientVariable | val : N1 >
        < "Temperature" : AmbientVariable | val : I1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Ok", channel : N2 >
        < "TemperatureLog" : EventLog | event : "Temperature Ok", timestamp : N1 >
    if I1 == 20 and not (E1 == "Temperature Ok") .

    crl [temperature-cold] :
        < "Time" : AmbientVariable | val : N1 >
        < "Temperature" : AmbientVariable | val : I1 >
        < "TemperatureSensor" : Sensor | currentEvent : E1, channel : N2 >
    =>
        < "Time" : AmbientVariable | val : N1 >
        < "Temperature" : AmbientVariable | val : I1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Cold", channel : N2 >
        < "TemperatureLog" : EventLog | event : "Temperature Cold", timestamp : N1 >
    if (I1 <= 15 ) and not (E1 == "Temperature Cold") .


    --- Regras dos atuadores
    --- Emitem ações ao receberem eventos dos sensores.


    crl [air-conditioner-on] :
        < "Time" : AmbientVariable | val : N1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Hot", channel : N2 >
        < "TemperatureActuator" : Actuator | currentAction : A1, channel : N2 >
    =>
        < "Time" : AmbientVariable | val : N1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Hot", channel : N2 >
        < "TemperatureActuator" : Actuator | currentAction : "Air Conditioner" On, channel : N2 >
        < "AirConditionerLog" : ActionLog | action : "Air Conditioner" On, timestamp : N1 >
    if not (A1 == "Air Conditioner" On) .

    rl [air-conditioner-off] :
        < "Time" : AmbientVariable | val : N1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Ok", channel : N2 >
        < "TemperatureActuator" : Actuator | currentAction : "Air Conditioner" On, channel : N2 >
    =>
        < "Time" : AmbientVariable | val : N1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Ok", channel : N2 >
        < "TemperatureActuator" : Actuator | currentAction : "Air Conditioner" Off, channel : N2 >
        < "AirConditionerLog" : ActionLog | action : "Air Conditioner" Off, timestamp : N1 > .

    rl [heater-off] :
        < "Time" : AmbientVariable | val : N1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Ok", channel : N2 >
        < "TemperatureActuator" : Actuator | currentAction : "Heater" On, channel : N2 >
    =>
        < "Time" : AmbientVariable | val : N1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Ok", channel : N2 >
        < "TemperatureActuator" : Actuator | currentAction : "Heater" Off, channel : N2 >
        < "HeaterLog" : ActionLog | action : "Heater" Off, timestamp : N1 > .

    crl [heater-on] :
        < "Time" : AmbientVariable | val : N1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Cold", channel : N2 >
        < "TemperatureActuator" : Actuator | currentAction : A1, channel : N2 >
    =>
        < "Time" : AmbientVariable | val : N1 >
        < "TemperatureSensor" : Sensor | currentEvent : "Temperature Cold", channel : N2 >
        < "TemperatureActuator" : Actuator | currentAction : "Heater" On, channel : N2 >
        < "HeaterLog" : ActionLog | action : "Heater" On, timestamp : N1 >
    if not (A1 == "Heater" On) .


    --- Detecção de conflitos
    --- Quando surgem 2 eventos ou ações conflitantes, emite o sinal correspondente.


    crl [event-conflit] :
        C
        < S1 : EventLog | event : S2, timestamp : N1 >
        < S1 : EventLog | event : S3, timestamp : N1 >
    =>
        < "Event Conflict" : Conflict | reason : "2 events are conflicting" >
    if not (S2 == S3) .

    rl [action-conflit] :
        C
        < S1 : ActionLog | action : S2 On, timestamp : N1 >
        < S1 : ActionLog | action : S2 Off, timestamp : N1 >
    =>
        < "Action Conflict" : Conflict | reason : "2 actions are conflicting" > .

    
    --- Passagem de tempo
    --- Passa o tempo

    
    rl [pass-time] :
        < "Time" : AmbientVariable | val : N1 >
        < "Temperature" : AmbientVariable | val : N2 >
    =>
        < "Time" : AmbientVariable | val : N1 + 1 >
        < "Temperature" : AmbientVariable | val : N2 + 1 > .

endm

rew [300]
    < "Time" : AmbientVariable | val : 5 >
    < "Temperature" : AmbientVariable | val : 5 >
    < "TemperatureSensor" : Sensor | currentEvent : None, channel : 1 >
    < "TemperatureActuator" : Actuator | currentAction : None, channel : 1 > .